namespace SuperCompilador
{
    public class ParserConstants
    {
        public const int START_SYMBOL = 47;

        public const int FIRST_NON_TERMINAL = 47;
        public const int FIRST_SEMANTIC_ACTION = 85;

        public static int[,] PARSER_TABLE =
        {
            { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            { -1, 52, 52, 52, 52, 52, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, 52, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, 52, -1, -1, -1, -1, -1, 52, -1, -1, -1, -1, -1, -1, -1, 52 },
            { -1, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, -1, 17, -1, -1, 17, 17, -1, -1, -1, -1, 17, 17, 15, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            { -1, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, 18, -1, -1, 18, 18, -1, -1, -1, -1, 18, 18, 18, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            { -1, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, 19, -1, 19, -1, -1, 19, 19, -1, -1, -1, -1, 19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 28, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            { -1, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, 34, -1, 32, -1, -1, 33, 30, -1, -1, -1, -1, 31, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            { -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, 13, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1 },
            { -1, -1, -1, -1, -1, -1,  2,  1,  3,  4,  5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            { -1, -1,  6,  7,  9,  8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            { -1, 38, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 39, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            { -1, 42, 42, 42, 42, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, 42, -1, -1, -1, -1, -1, 42, -1, -1, -1, -1, -1, -1, -1, 42 },
            { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1 },
            { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 45, 45, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            { -1, 41, -1, -1, -1, 40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 50, -1, 49, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            { -1, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, 35, -1, 35, -1, -1, 35, 35, -1, -1, -1, -1, 35, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            { -1, 36, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36, 37, 36, 37, 37, 36, 36, -1, -1, -1, -1, 36, 36, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, 22, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 25, -1, -1, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 55, 55, -1, -1, -1, -1, -1, -1, -1, -1, -1, 55, -1, -1, -1, -1, 53, 54, -1 },
            { -1, 56, 56, 56, 56, 56, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 58, 57, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, 56, -1, -1, -1, -1, -1, 56, -1, -1, -1, -1, -1, -1, -1, 59 },
            { -1, 67, 67, 67, 67, 67, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 67, 67, -1, -1, -1, -1, -1, 67, -1, -1, -1, -1, -1, -1, -1, -1 },
            { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 70, 70, -1, 68, 69, -1, -1, -1, -1, -1, -1, 70, 70, 70, 70, 70, 70, 70, -1 },
            { -1, 60, 60, 60, 60, 60, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 60, 60, -1, -1, -1, -1, -1, 60, -1, -1, -1, -1, -1, -1, -1, -1 },
            { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, 62, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, 61, 61, 61, 61, 62, 62, -1 },
            { -1, 71, 71, 71, 71, 71, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 71, 71, -1, -1, -1, -1, -1, 71, -1, -1, -1, -1, -1, -1, -1, -1 },
            { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 72, 72, -1, 72, 72, 73, 74, -1, -1, 75, -1, 72, 72, 72, 72, 72, 72, 72, -1 },
            { -1, 76, 77, 78, 79, 80, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 82, 83, -1, -1, -1, -1, -1, 81, -1, -1, -1, -1, -1, -1, -1, -1 },
            { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 66, 65, 63, 64, -1, -1, -1 }
        };

        public static int[][] PRODUCTIONS =
        {
            new[] { 100,  21,  22,  35,  50,  36, 101 },
            new[] {   8 },
            new[] {   7 },
            new[] {   9 },
            new[] {  10 },
            new[] {  11 },
            new[] {   3 },
            new[] {   4 },
            new[] {   6 },
            new[] {   5 },
            new[] {  20 },
            new[] {  19 },
            new[] {   2, 117,  56 },
            new[] {  28,  55 },
            new[] {   0 },
            new[] {  52 },
            new[] {  53 },
            new[] {  54 },
            new[] {  49,  51 },
            new[] {  50 },
            new[] {   0 },
            new[] {  27,  57, 115, 116,  72 },
            new[] {  30,  58 },
            new[] {   0 },
            new[] {  30,  58 },
            new[] {  71 },
            new[] {  73 },
            new[] {  25,  55,  74,  29 },
            new[] {  26,  55,  74,  29 },
            new[] {  59 },
            new[] {  60 },
            new[] {  63 },
            new[] {  64 },
            new[] {  65 },
            new[] {  12,  29 },
            new[] {  54,  70 },
            new[] {  69 },
            new[] {   0 },
            new[] {   2, 117,  30,  48, 119,  29 },
            new[] {  18,  38,  66,  55, 120,  39,  29 },
            new[] {   6, 107,  99,  28 },
            new[] {   0 },
            new[] {  48,  99,  62 },
            new[] {  28,  61 },
            new[] {   0 },
            new[] {  67,  38,  61,  39, 102,  29 },
            new[] {  23 },
            new[] {  24 },
            new[] {  14,  38,  48,  39, 109,  69,  68,  13, 111,  29 },
            new[] {  15, 110,  69 },
            new[] {   0 },
            new[] { 112,  17,  69,  16,  38,  48,  39, 113,  13,  29 },
            new[] {  76,  75 },
            new[] {  44,  76, 103,  75 },
            new[] {  45,  76, 104,  75 },
            new[] {   0 },
            new[] {  79 },
            new[] {  20,  96 },
            new[] {  19,  97 },
            new[] {  46,  76,  98 },
            new[] {  77,  80 },
            new[] {  84,  94,  77,  95 },
            new[] {   0 },
            new[] {  42 },
            new[] {  43 },
            new[] {  41 },
            new[] {  40 },
            new[] {  81,  78 },
            new[] {  31,  81,  86,  78 },
            new[] {  32,  81,  87,  78 },
            new[] {   0 },
            new[] {  83,  82 },
            new[] {   0 },
            new[] {  33,  83,  88,  82 },
            new[] {  34,  83,  89,  82 },
            new[] {  37,  83, 105,  82 },
            new[] {   2, 118 },
            new[] {   3,  90 },
            new[] {   4,  91 },
            new[] {   5, 106 },
            new[] {   6, 107 },
            new[] {  38,  48,  39 },
            new[] {  31,  83,  92 },
            new[] {  32,  83,  93 }
        };

        public static string[] PARSER_ERROR =
        {
            ""                                                                                 ,// "",
            "esperado EOF"                                                                     ,// "Era esperado fim de programa",
            "esperado identificador"                                                           ,// "Era esperado identificador",
            "esperado constante_int"                                                           ,// "Era esperado tpInt",
            "esperado constante_float"                                                         ,// "Era esperado tpFloat",
            "esperado constante_char"                                                          ,// "Era esperado tpChar",
            "esperado constante_string"                                                        ,// "Era esperado tpString",
            "esperado int"                                                                     ,// "Era esperado int",
            "esperado float"                                                                   ,// "Era esperado float",
            "esperado char"                                                                    ,// "Era esperado char",
            "esperado string"                                                                  ,// "Era esperado string",
            "esperado boolean"                                                                 ,// "Era esperado boolean",
            "esperado break"                                                                   ,// "Era esperado break",
            "esperado end"                                                                     ,// "Era esperado end",
            "esperado if"                                                                      ,// "Era esperado if",
            "esperado else"                                                                    ,// "Era esperado else",
            "esperado while"                                                                   ,// "Era esperado while",
            "esperado do"                                                                      ,// "Era esperado do",
            "esperado readln"                                                                  ,// "Era esperado readln",
            "esperado false"                                                                   ,// "Era esperado false",
            "esperado true"                                                                    ,// "Era esperado true",
            "esperado fun"                                                                     ,// "Era esperado fun",
            "esperado main"                                                                    ,// "Era esperado main",
            "esperado print"                                                                   ,// "Era esperado print",
            "esperado println"                                                                 ,// "Era esperado println",
            "esperado val"                                                                     ,// "Era esperado val",
            "esperado var"                                                                     ,// "Era esperado var",
            "esperado \":\""                                                                   ,// "Era esperado \":\"",
            "esperado \",\""                                                                   ,// "Era esperado \",\"",
            "esperado \";\""                                                                   ,// "Era esperado \";\"",
            "esperado \"=\""                                                                   ,// "Era esperado \"=\"",
            "esperado \"+\""                                                                   ,// "Era esperado \"+\"",
            "esperado \"-\""                                                                   ,// "Era esperado \"-\"",
            "esperado \"*\""                                                                   ,// "Era esperado \"*\"",
            "esperado \"/\""                                                                   ,// "Era esperado \"/\"",
            "esperado \"{\""                                                                   ,// "Era esperado \"{\"",
            "esperado \"}\""                                                                   ,// "Era esperado \"}\"",
            "esperado \"%\""                                                                   ,// "Era esperado \"%\"",
            "esperado \"(\""                                                                   ,// "Era esperado \"(\"",
            "esperado \")\""                                                                   ,// "Era esperado \")\"",
            "esperado \">\""                                                                   ,// "Era esperado \">\"",
            "esperado \"<\""                                                                   ,// "Era esperado \"<\"",
            "esperado \"==\""                                                                  ,// "Era esperado \"==\"",
            "esperado \"!=\""                                                                  ,// "Era esperado \"!=\"",
            "esperado \"&&\""                                                                  ,// "Era esperado \"&&\"",
            "esperado \"||\""                                                                  ,// "Era esperado \"||\"",
            "esperado \"!\""                                                                   ,// "Era esperado \"!\"",
            "esperado fun"                                                                     ,//"<programa> inváido",
            "esperado expressão"                                                               ,//"<expressao> inválido",
            "esperado identificador break if do readln print printl val var"                   ,//"<instrucao> inválido",
            "esperado identificador break if do readln print printl val var"                   ,//"<lista_instrucoes> inválido",
            "esperado identificador break if do readln print printl val var }"                 ,//"<lista_instrucoes_> inválido",
            "esperado val"                                                                     ,//"<declaracao_constantes> inválido",
            "esperado var"                                                                     ,//"<declaracao_variaveis> inválido",
            "esperado identificador break if do readln print println"                          ,//"<comando> inválido",
            "esperado identificador"                                                           ,//"<lista_identificadores> inválido",
            "esperado : , = }"                                                                 ,//"<lista_identificadores_> inválido",
            "esperado  int float char strign boolean "                                         ,//"<tipo> inválido",
            "esperado constante_int constante_float constante_char constante_string false true",//"<valor> inválido",
            "esperado identificador"                                                           ,//"<atribuicao> inválido",
            "esperado readln"                                                                  ,//"<entrada> inválido",
            "esperado expressão"                                                               ,//"<lista_expressao> inválido", identificador constante int constante float constante char constante string false true + - { !
            "esperado , )"                                                                     ,//"<lista_expressao_> inválido", , )
            "esperado print println"                                                           ,//"<saida> inválido",
            "esperado if"                                                                      ,//"<selecao> inválido",
            "esperado do"                                                                      ,//"<repeticao> inválido",
            "esperado identificador constante_string"                                          ,//"<string_opcional> inválido",
            "esperado print println "                                                          ,//"<tipo_saida> inválido",
            "esperado end else"                                                                ,//"<else_opcional> inválido",
            "esperado identificador break if do readln print println"                          ,//"<lista_comandos> inválido",
            "esperado identificador break end if else while do readln print println"           ,//"<lista_comandos_> inválido",
            "esperado :"                                                                       ,//"<dec_t> inválido",
            "esperado ; ="                                                                     ,//"<dec_t_> inválido",
            "esperado ="                                                                       ,//"<dec_v> inválido",
            "esperado : ="                                                                     ,//"<opcoes> inválido",
            "esperado expressão"                                                               ,//"<expressao_> inválido", , ; ) && ||
            "esperado expressão"                                                               ,//"<elemento> inválido", identificador constante int constante float constante char constante string false true + - ( !
            "esperado expressão"                                                               ,//"<aritmetica> inválido", identificador constante int constante float constante char constante string  + - (
            "esperado expressão"                                                               ,//"<aritmetica_> inválido", , : + - ) > < == != end ||
            "esperado expressão"                                                               ,//"<relacional> inválido", identificador constante int constante float constante char constante string + - (
            "esperado expressão"                                                               ,//"<relacional_> inválido", , : ) > < == != && ||
            "esperado expressão"                                                               ,//"<termo> inválido", identificador constante int constante float constante char constante string + - (
            "esperado expressão"                                                               ,//"<termo_> inválido", , : + - * / % ) > < == != && ||
            "esperado expressão"                                                               ,//"<fator> inválido", identificador constante int constante float constante char constante string + - (
            "esperado > < == !="                                                               ,//"<operador_relacional> inválido"
        };
    }
}